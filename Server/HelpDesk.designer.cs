#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Server
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="aspnet-HelpCenter-20180611012352")]
	public partial class HelpDeskDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWorkOrder(WorkOrder instance);
    partial void UpdateWorkOrder(WorkOrder instance);
    partial void DeleteWorkOrder(WorkOrder instance);
    partial void InsertAppUser(AppUser instance);
    partial void UpdateAppUser(AppUser instance);
    partial void DeleteAppUser(AppUser instance);
    partial void InsertWorkOrderComment(WorkOrderComment instance);
    partial void UpdateWorkOrderComment(WorkOrderComment instance);
    partial void DeleteWorkOrderComment(WorkOrderComment instance);
    #endregion
		
		public HelpDeskDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["aspnet_HelpCenter_20180611012352ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public HelpDeskDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HelpDeskDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HelpDeskDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public HelpDeskDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<WorkOrder> WorkOrders
		{
			get
			{
				return this.GetTable<WorkOrder>();
			}
		}
		
		public System.Data.Linq.Table<AppUser> AppUsers
		{
			get
			{
				return this.GetTable<AppUser>();
			}
		}
		
		public System.Data.Linq.Table<WorkOrderComment> WorkOrderComments
		{
			get
			{
				return this.GetTable<WorkOrderComment>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrders")]
	public partial class WorkOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Subject;
		
		private System.Nullable<int> _CategoryId;
		
		private int _StatusId;
		
		private System.DateTime _StatusDateTime;
		
		private string _RequestorId;
		
		private System.Nullable<int> _LocationId;
		
		private System.Nullable<int> _UnitId;
		
		private string _AssignedUserId;
		
		private System.DateTime _CreateDateTime;
		
		private System.DateTime _ModifiedDateTime;
		
		private System.Nullable<System.DateTime> _ExpectedCompletionDateTime;
		
		private EntitySet<WorkOrderComment> _WorkOrderComments;
		
		private EntityRef<AppUser> _AppUser;
		
		private EntityRef<AppUser> _AppUser1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnCategoryIdChanging(System.Nullable<int> value);
    partial void OnCategoryIdChanged();
    partial void OnStatusIdChanging(int value);
    partial void OnStatusIdChanged();
    partial void OnStatusDateTimeChanging(System.DateTime value);
    partial void OnStatusDateTimeChanged();
    partial void OnRequestorIdChanging(string value);
    partial void OnRequestorIdChanged();
    partial void OnLocationIdChanging(System.Nullable<int> value);
    partial void OnLocationIdChanged();
    partial void OnUnitIdChanging(System.Nullable<int> value);
    partial void OnUnitIdChanged();
    partial void OnAssignedUserIdChanging(string value);
    partial void OnAssignedUserIdChanged();
    partial void OnCreateDateTimeChanging(System.DateTime value);
    partial void OnCreateDateTimeChanged();
    partial void OnModifiedDateTimeChanging(System.DateTime value);
    partial void OnModifiedDateTimeChanged();
    partial void OnExpectedCompletionDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnExpectedCompletionDateTimeChanged();
    #endregion
		
		public WorkOrder()
		{
			this._WorkOrderComments = new EntitySet<WorkOrderComment>(new Action<WorkOrderComment>(this.attach_WorkOrderComments), new Action<WorkOrderComment>(this.detach_WorkOrderComments));
			this._AppUser = default(EntityRef<AppUser>);
			this._AppUser1 = default(EntityRef<AppUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="NVarChar(MAX)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int")]
		public System.Nullable<int> CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", DbType="Int NOT NULL")]
		public int StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime StatusDateTime
		{
			get
			{
				return this._StatusDateTime;
			}
			set
			{
				if ((this._StatusDateTime != value))
				{
					this.OnStatusDateTimeChanging(value);
					this.SendPropertyChanging();
					this._StatusDateTime = value;
					this.SendPropertyChanged("StatusDateTime");
					this.OnStatusDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestorId", DbType="NVarChar(128)")]
		public string RequestorId
		{
			get
			{
				return this._RequestorId;
			}
			set
			{
				if ((this._RequestorId != value))
				{
					if (this._AppUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRequestorIdChanging(value);
					this.SendPropertyChanging();
					this._RequestorId = value;
					this.SendPropertyChanged("RequestorId");
					this.OnRequestorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int")]
		public System.Nullable<int> LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitId", DbType="Int")]
		public System.Nullable<int> UnitId
		{
			get
			{
				return this._UnitId;
			}
			set
			{
				if ((this._UnitId != value))
				{
					this.OnUnitIdChanging(value);
					this.SendPropertyChanging();
					this._UnitId = value;
					this.SendPropertyChanged("UnitId");
					this.OnUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignedUserId", DbType="NVarChar(128)")]
		public string AssignedUserId
		{
			get
			{
				return this._AssignedUserId;
			}
			set
			{
				if ((this._AssignedUserId != value))
				{
					if (this._AppUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssignedUserIdChanging(value);
					this.SendPropertyChanging();
					this._AssignedUserId = value;
					this.SendPropertyChanged("AssignedUserId");
					this.OnAssignedUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDateTime
		{
			get
			{
				return this._CreateDateTime;
			}
			set
			{
				if ((this._CreateDateTime != value))
				{
					this.OnCreateDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateDateTime = value;
					this.SendPropertyChanged("CreateDateTime");
					this.OnCreateDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDateTime
		{
			get
			{
				return this._ModifiedDateTime;
			}
			set
			{
				if ((this._ModifiedDateTime != value))
				{
					this.OnModifiedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDateTime = value;
					this.SendPropertyChanged("ModifiedDateTime");
					this.OnModifiedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpectedCompletionDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpectedCompletionDateTime
		{
			get
			{
				return this._ExpectedCompletionDateTime;
			}
			set
			{
				if ((this._ExpectedCompletionDateTime != value))
				{
					this.OnExpectedCompletionDateTimeChanging(value);
					this.SendPropertyChanging();
					this._ExpectedCompletionDateTime = value;
					this.SendPropertyChanged("ExpectedCompletionDateTime");
					this.OnExpectedCompletionDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrder_WorkOrderComment", Storage="_WorkOrderComments", ThisKey="Id", OtherKey="WorkOrderId")]
		public EntitySet<WorkOrderComment> WorkOrderComments
		{
			get
			{
				return this._WorkOrderComments;
			}
			set
			{
				this._WorkOrderComments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppUser_WorkOrder", Storage="_AppUser", ThisKey="AssignedUserId", OtherKey="Id", IsForeignKey=true)]
		public AppUser AppUser
		{
			get
			{
				return this._AppUser.Entity;
			}
			set
			{
				AppUser previousValue = this._AppUser.Entity;
				if (((previousValue != value) 
							|| (this._AppUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AppUser.Entity = null;
						previousValue.WorkOrders.Remove(this);
					}
					this._AppUser.Entity = value;
					if ((value != null))
					{
						value.WorkOrders.Add(this);
						this._AssignedUserId = value.Id;
					}
					else
					{
						this._AssignedUserId = default(string);
					}
					this.SendPropertyChanged("AppUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppUser_WorkOrder1", Storage="_AppUser1", ThisKey="RequestorId", OtherKey="Id", IsForeignKey=true)]
		public AppUser AppUser1
		{
			get
			{
				return this._AppUser1.Entity;
			}
			set
			{
				AppUser previousValue = this._AppUser1.Entity;
				if (((previousValue != value) 
							|| (this._AppUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AppUser1.Entity = null;
						previousValue.WorkOrders1.Remove(this);
					}
					this._AppUser1.Entity = value;
					if ((value != null))
					{
						value.WorkOrders1.Add(this);
						this._RequestorId = value.Id;
					}
					else
					{
						this._RequestorId = default(string);
					}
					this.SendPropertyChanged("AppUser1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkOrderComments(WorkOrderComment entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrder = this;
		}
		
		private void detach_WorkOrderComments(WorkOrderComment entity)
		{
			this.SendPropertyChanging();
			entity.WorkOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AppUsers")]
	public partial class AppUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _NameFirst;
		
		private string _NameLast;
		
		private string _PhoneNumber;
		
		private string _EmailAddress;
		
		private System.Nullable<int> _LocationId;
		
		private System.Nullable<int> _UnitId;
		
		private string _Discriminator;
		
		private EntitySet<WorkOrder> _WorkOrders;
		
		private EntitySet<WorkOrder> _WorkOrders1;
		
		private EntitySet<WorkOrderComment> _WorkOrderComments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameFirstChanging(string value);
    partial void OnNameFirstChanged();
    partial void OnNameLastChanging(string value);
    partial void OnNameLastChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnLocationIdChanging(System.Nullable<int> value);
    partial void OnLocationIdChanged();
    partial void OnUnitIdChanging(System.Nullable<int> value);
    partial void OnUnitIdChanged();
    partial void OnDiscriminatorChanging(string value);
    partial void OnDiscriminatorChanged();
    #endregion
		
		public AppUser()
		{
			this._WorkOrders = new EntitySet<WorkOrder>(new Action<WorkOrder>(this.attach_WorkOrders), new Action<WorkOrder>(this.detach_WorkOrders));
			this._WorkOrders1 = new EntitySet<WorkOrder>(new Action<WorkOrder>(this.attach_WorkOrders1), new Action<WorkOrder>(this.detach_WorkOrders1));
			this._WorkOrderComments = new EntitySet<WorkOrderComment>(new Action<WorkOrderComment>(this.attach_WorkOrderComments), new Action<WorkOrderComment>(this.detach_WorkOrderComments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameFirst", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string NameFirst
		{
			get
			{
				return this._NameFirst;
			}
			set
			{
				if ((this._NameFirst != value))
				{
					this.OnNameFirstChanging(value);
					this.SendPropertyChanging();
					this._NameFirst = value;
					this.SendPropertyChanged("NameFirst");
					this.OnNameFirstChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameLast", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string NameLast
		{
			get
			{
				return this._NameLast;
			}
			set
			{
				if ((this._NameLast != value))
				{
					this.OnNameLastChanging(value);
					this.SendPropertyChanging();
					this._NameLast = value;
					this.SendPropertyChanged("NameLast");
					this.OnNameLastChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(MAX)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(MAX)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="Int")]
		public System.Nullable<int> LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitId", DbType="Int")]
		public System.Nullable<int> UnitId
		{
			get
			{
				return this._UnitId;
			}
			set
			{
				if ((this._UnitId != value))
				{
					this.OnUnitIdChanging(value);
					this.SendPropertyChanging();
					this._UnitId = value;
					this.SendPropertyChanged("UnitId");
					this.OnUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discriminator", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Discriminator
		{
			get
			{
				return this._Discriminator;
			}
			set
			{
				if ((this._Discriminator != value))
				{
					this.OnDiscriminatorChanging(value);
					this.SendPropertyChanging();
					this._Discriminator = value;
					this.SendPropertyChanged("Discriminator");
					this.OnDiscriminatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppUser_WorkOrder", Storage="_WorkOrders", ThisKey="Id", OtherKey="AssignedUserId")]
		public EntitySet<WorkOrder> WorkOrders
		{
			get
			{
				return this._WorkOrders;
			}
			set
			{
				this._WorkOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppUser_WorkOrder1", Storage="_WorkOrders1", ThisKey="Id", OtherKey="RequestorId")]
		public EntitySet<WorkOrder> WorkOrders1
		{
			get
			{
				return this._WorkOrders1;
			}
			set
			{
				this._WorkOrders1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppUser_WorkOrderComment", Storage="_WorkOrderComments", ThisKey="Id", OtherKey="CommentorId")]
		public EntitySet<WorkOrderComment> WorkOrderComments
		{
			get
			{
				return this._WorkOrderComments;
			}
			set
			{
				this._WorkOrderComments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkOrders(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.AppUser = this;
		}
		
		private void detach_WorkOrders(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.AppUser = null;
		}
		
		private void attach_WorkOrders1(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.AppUser1 = this;
		}
		
		private void detach_WorkOrders1(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.AppUser1 = null;
		}
		
		private void attach_WorkOrderComments(WorkOrderComment entity)
		{
			this.SendPropertyChanging();
			entity.AppUser = this;
		}
		
		private void detach_WorkOrderComments(WorkOrderComment entity)
		{
			this.SendPropertyChanging();
			entity.AppUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrderComments")]
	public partial class WorkOrderComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _WorkOrderId;
		
		private string _Comment;
		
		private System.DateTime _CreateDateTime;
		
		private string _CommentorId;
		
		private EntityRef<AppUser> _AppUser;
		
		private EntityRef<WorkOrder> _WorkOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnWorkOrderIdChanging(int value);
    partial void OnWorkOrderIdChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnCreateDateTimeChanging(System.DateTime value);
    partial void OnCreateDateTimeChanged();
    partial void OnCommentorIdChanging(string value);
    partial void OnCommentorIdChanged();
    #endregion
		
		public WorkOrderComment()
		{
			this._AppUser = default(EntityRef<AppUser>);
			this._WorkOrder = default(EntityRef<WorkOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderId", DbType="Int NOT NULL")]
		public int WorkOrderId
		{
			get
			{
				return this._WorkOrderId;
			}
			set
			{
				if ((this._WorkOrderId != value))
				{
					if (this._WorkOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkOrderIdChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderId = value;
					this.SendPropertyChanged("WorkOrderId");
					this.OnWorkOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDateTime
		{
			get
			{
				return this._CreateDateTime;
			}
			set
			{
				if ((this._CreateDateTime != value))
				{
					this.OnCreateDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateDateTime = value;
					this.SendPropertyChanged("CreateDateTime");
					this.OnCreateDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentorId", DbType="NVarChar(128)")]
		public string CommentorId
		{
			get
			{
				return this._CommentorId;
			}
			set
			{
				if ((this._CommentorId != value))
				{
					if (this._AppUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentorIdChanging(value);
					this.SendPropertyChanging();
					this._CommentorId = value;
					this.SendPropertyChanged("CommentorId");
					this.OnCommentorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AppUser_WorkOrderComment", Storage="_AppUser", ThisKey="CommentorId", OtherKey="Id", IsForeignKey=true)]
		public AppUser AppUser
		{
			get
			{
				return this._AppUser.Entity;
			}
			set
			{
				AppUser previousValue = this._AppUser.Entity;
				if (((previousValue != value) 
							|| (this._AppUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AppUser.Entity = null;
						previousValue.WorkOrderComments.Remove(this);
					}
					this._AppUser.Entity = value;
					if ((value != null))
					{
						value.WorkOrderComments.Add(this);
						this._CommentorId = value.Id;
					}
					else
					{
						this._CommentorId = default(string);
					}
					this.SendPropertyChanged("AppUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkOrder_WorkOrderComment", Storage="_WorkOrder", ThisKey="WorkOrderId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public WorkOrder WorkOrder
		{
			get
			{
				return this._WorkOrder.Entity;
			}
			set
			{
				WorkOrder previousValue = this._WorkOrder.Entity;
				if (((previousValue != value) 
							|| (this._WorkOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WorkOrder.Entity = null;
						previousValue.WorkOrderComments.Remove(this);
					}
					this._WorkOrder.Entity = value;
					if ((value != null))
					{
						value.WorkOrderComments.Add(this);
						this._WorkOrderId = value.Id;
					}
					else
					{
						this._WorkOrderId = default(int);
					}
					this.SendPropertyChanged("WorkOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
